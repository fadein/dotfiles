; Chicken Scheme Interpreter resource file
; Chicken 5.0.0 +

(import (chicken csi))
(import (chicken file))
(import (chicken format))
(import (chicken io))
(import (chicken memory))
(import (chicken process))
(import (chicken process-context))
(import (chicken string))
(import srfi-1)
(import srfi-2)
(import srfi-13)

;; Backup copy of the original input port
(define +orig-input-port+ (current-input-port))


(begin
  ;; these modules need to be chicken-installed each time a new
  ;; CHICKEN system is built (more especially when a new chicken.so
  ;; lib version is released)

  ; Import chicken-doc or explain how to manually set it up
  (handle-exceptions
    _
    (print
      "The 'chicken-doc' egg requires a bit of manual setup\n"
      "Run this command (the parens are for a subshell):\n"
      "( cd `csi -R chicken.platform -np '(chicken-home)'` && curl http://3e8.org/pub/chicken-doc/chicken-doc-repo-5.tar.bz2 | sudo tar jx )")
    (import chicken-doc))


  ; "breadline" readline interface
  (import (prefix breadline "rl-"))
  (import (prefix breadline-scheme-completion "rl-"))
  (rl-history-file (format "~a/.csi_history" (get-environment-variable "HOME")))
  (rl-stifle-history! 10000)
  (rl-completer-word-break-characters-set! "\"\'`;|()[]@\t ")
  (rl-completer-set! rl-scheme-completer)
  (rl-basic-quote-characters-set! "\"|")
  (rl-variable-bind! "blink-matching-paren" "on")
  (rl-paren-blink-timeout-set! 200000)
  (current-input-port (rl-make-readline-port))

  ; use linenoise instead of readline
  ; (define orig-input-port (current-input-port))
  ; (import linenoise)
  ; (current-input-port (make-linenoise-port))


  ; provide the ,x* csi command to fully expand macros
  (import expand-full)


  ; provide ,a csi command - search for identifiers with Regex
  (import apropos)


  ;; define the ,el toplevel command that will edit files in my $EDITOR,
  ;; and load them into the interpreter after leaving $EDITOR
  (let* ((edit-and-load-symbol 'el)
         (editor
           (or (editor-command)
               (get-environment-variable "EDITOR")
               (get-environment-variable "VISUAL")
               (if (get-environment-variable "EMACS")
                   "emacsclient"
                   "vi")))

         (help-text
           (format ",~a FILENAME      Edit FILENAME in external editor (~a) and load results"
             (symbol->string edit-and-load-symbol) editor))

         (edit-and-load
           (lambda ()
             (let ((files-str (read-line)))
               (if (= 0 (string-length files-str))
                   (printf "Usage: ~a~n" help-text)
                   (let ((retval (system (format "~a ~a" editor files-str))))
                     (if (not (zero? retval))
                         (printf "~a returned with non-zero exit status: ~a~n" editor retval)
                         ; verify that the file(s) were written
                         (let ((edited-files
                                 (filter file-exists?
                                         (map string-trim-both
                                              (string-split files-str)))))
                           (for-each load edited-files)))))))))

    (toplevel-command
      edit-and-load-symbol
      edit-and-load
      help-text))
  )

(load "/home/fadein/devel/scheme/statistics/statistics.scm") (import statistics)

; Mimic Python's id() function
(define (id obj)
  (and-let* ((ptr (object->pointer obj))
             (addr (pointer->address ptr)))
            addr))

(define (id obj)
  (and-let* ((ptr (object->pointer obj)))
             (pointer->address ptr)))

; print the ratio of two numbers as a percent (to two decimals)
(define (% n d #!optional (precision 2))
  (import fmt)
  (fmt #t (num (* 100.0 n (/ d)) 10 precision) #\% nl))

; vim: filetype=scheme tabstop=2 expandtab:
